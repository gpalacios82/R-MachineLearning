i <- i + 1
}
while(i<nrow(resultado)){
resultado[i,] <- sum(resultado[i,]/detect)/ncol(resultado)
i <- i + 1
}
nrow(resultado)
detect
i <- 1
while(i<nrow(resultado)){
resultado[i,] <- sum(resultado[i,]/detect)
i <- i + 1
}
resultado[i,] / detect
resultado[i,]/detect
resultado[i,]
resultado[,i]
resultado[,i]/detect
detect
detect[,i]
resultado[,i]
resultado[,i]/detect[,i]
resultado[,i]
detect[,i]
resultado[i,]
resultado[,i]
i <- 1
while(i<nrow(resultado)){
resultado[,i] <- lapply(resultado[,i], function(x) resultado[,i]/detect[,i])
i <- i + 1
}
resultado[,i] <- lapply(resultado[,i], function(x) resultado[,i]/detect[,i])
i <- 1
x <- 1
resultado[x,i]/detect[,xi]
resultado[x,i]/detect[1,x]
i <- 1
while(i<nrow(resultado)){
x <- 1
while(x<ncol(resultado)){
resultado[x,i] <- resultado[x,i]/detect[1,x]
x <- x + 1
}
i <- i + 1
}
ncol(resultado)
setwd("/Users/Gus/Desktop/JantoNext/R/RPrograms/GoogleVision/")
########### CARGAMOS LAS LIBRERIAS #############
library(xlsx)
library(tidyverse)
library(RoogleVision)
library(jsonlite)
library(EBImage)
library(leaflet)
library(videoplayR)
library(rpart)
library(dplyr)
############## CARGAMOS CREDENCIALES DE GOOGLE ##############
creds = fromJSON('client_secret_936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com.json')
options("googleAuthR.client_id" = "936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "WS4mT_giiompZ5VgAKD7mNCh")
options("googleAuthR.client_id" = creds$installed$client_id)
options("googleAuthR.client_secret" = creds$installed$client_secret)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
################# FUNCIONES ################
InicializaWebcam <- function (id){
return(readStream(id))
}
CapturaImagen <- function (){
imagen <- nextFrame(stream1)
imshow(imagen)
writeImg("imagen.jpg", imagen)
return('./imagen.jpg')
}
DetectarRasgos <- function(NombrePersona, id){
my_face = getGoogleVisionResponse(imagen, feature = 'FACE_DETECTION')
df <- data.frame(matrix(unlist(my_face$landmarks), nrow=34, byrow=F))
names(df) <- c("type","x","y","z")
df$person <- NombrePersona
df$id <- id
return(df)
}
AddRasgos <- function(df_train, Nombre){
df_train <- df_train %>%
as_tibble() %>%
rbind(DetectarRasgos(Nombre, max(df_train$id)+1))
return(df_train)
}
TransformarDF <- function(df){
df$X. <- NULL
x <- spread(df[,c(1,2,5)], key = "type", value = "x")
y <- spread(df[,c(1,3,5)], key = "type", value = "y")
z <- spread(df[,c(1,4,5)], key = "type", value = "z")
names(x) <- paste(names(x),"-x",sep="")
names(y) <- paste(names(y),"-y",sep="")
names(z) <- paste(names(z),"-z",sep="")
x <- x %>%
as_tibble() %>%
mutate(person = `person-x`) %>%
select(-`person-x`)
y <- y %>%
as_tibble() %>%
mutate(person = `person-y`) %>%
select(-`person-y`)
z <- z %>%
as_tibble() %>%
mutate(person = `person-z`) %>%
select(-`person-z`)
train <- x %>%
left_join(y) %>%
left_join(z)
aux <- train
train[] <- lapply(train[], function(x) as.numeric(levels(x)))
train$person <- aux$person
return(train)
}
stream1 <- InicializaWebcam(0)
df_train <- xlsx::read.xlsx2("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
train <- TransformarDF(df_train)
imagen <- CapturaImagen()
df_detect <- DetectarRasgos("", 1)
df_detect$id <- NULL
detect <- TransformarDF(df_detect)
aux <- train
train$person <- NULL
detect$person<- NULL
resultado <- train
i <- 1
x <- 1
nrow(resultado)
x <- 1
ncol(resultado)
x <- 102
i <- 3
resultado[x,i]
resultado[i,x]
detect[1,x]
i <- 1
while(i<nrow(resultado)){
x <- 1
while(x<ncol(resultado)){
resultado[i,x] <- resultado[i,x]/detect[1,x]
x <- x + 1
}
i <- i + 1
}
resultado[1,]
sum(resultado[1,])
sum(resultado[1,])/ncol(resultado)
i <- 1
sum(resultado[i,])/ncol(resultado)
sum(resultado[i,])/ncol(resultado)
i <- 1
while(i<nrow(resultado)){
resultado[i]$calculo <- sum(resultado[i,])/ncol(resultado)
i <- i + 1
}
resultado$person <- aux$person
resultado$person
resultado$calculo
resultado[1]$calculo
resultado[1]$`CHIN_GNATHION-x`
resultado$`CHIN_GNATHION-x`
resultado$`CHIN_GNATHION-x`[1]
resultado$person <- NULL
resultado$person <- NULL
i <- 1
while(i<nrow(resultado)){
resultado$calculo[i] <- sum(resultado[i,])/ncol(resultado)
i <- i + 1
}
resultado$person <- aux$person
resultado$calculo
paste(resultado$calculo, resultado$person)
paste(resultado$calculo, resultado$person, sep="\n")
paste(resultado$calculo, resultado$person, collapse="\n")
paste(resultado$calculo, resultado$person, collapse=" ")
View(resultado)
ncol(resultado)
resultado[,103:104]
resultado[,103:104]
final <- resultado[,103:104]
final <- resultado[,103:104] %>%
as_tibble()
resultado[,103:104] %>%
as_tibble()
resultado[,103:104] %>%
as_tibble() %>%
arrange(desc(calculo))
setwd("/Users/Gus/Desktop/JantoNext/R/RPrograms/GoogleVision/")
########### CARGAMOS LAS LIBRERIAS #############
library(xlsx)
library(tidyverse)
library(RoogleVision)
library(jsonlite)
library(EBImage)
library(leaflet)
library(videoplayR)
library(rpart)
library(dplyr)
############## CARGAMOS CREDENCIALES DE GOOGLE ##############
creds = fromJSON('client_secret_936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com.json')
options("googleAuthR.client_id" = "936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "WS4mT_giiompZ5VgAKD7mNCh")
options("googleAuthR.client_id" = creds$installed$client_id)
options("googleAuthR.client_secret" = creds$installed$client_secret)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
################# FUNCIONES ################
InicializaWebcam <- function (id){
return(readStream(id))
}
CapturaImagen <- function (){
imagen <- nextFrame(stream1)
imshow(imagen)
writeImg("imagen.jpg", imagen)
return('./imagen.jpg')
}
DetectarRasgos <- function(NombrePersona, id){
my_face = getGoogleVisionResponse(imagen, feature = 'FACE_DETECTION')
df <- data.frame(matrix(unlist(my_face$landmarks), nrow=34, byrow=F))
names(df) <- c("type","x","y","z")
df$person <- NombrePersona
df$id <- id
return(df)
}
AddRasgos <- function(df_train, Nombre){
df_train <- df_train %>%
as_tibble() %>%
rbind(DetectarRasgos(Nombre, max(df_train$id)+1))
return(df_train)
}
TransformarDF <- function(df){
df$X. <- NULL
x <- spread(df[,c(1,2,5)], key = "type", value = "x")
y <- spread(df[,c(1,3,5)], key = "type", value = "y")
z <- spread(df[,c(1,4,5)], key = "type", value = "z")
names(x) <- paste(names(x),"-x",sep="")
names(y) <- paste(names(y),"-y",sep="")
names(z) <- paste(names(z),"-z",sep="")
x <- x %>%
as_tibble() %>%
mutate(person = `person-x`) %>%
select(-`person-x`)
y <- y %>%
as_tibble() %>%
mutate(person = `person-y`) %>%
select(-`person-y`)
z <- z %>%
as_tibble() %>%
mutate(person = `person-z`) %>%
select(-`person-z`)
train <- x %>%
left_join(y) %>%
left_join(z)
aux <- train
train[] <- lapply(train[], function(x) as.numeric(levels(x)))
train$person <- aux$person
return(train)
}
####### CAPTURAR DATOS PARA ENTRENAR EL ALGORITMO ##########
stream1 <- InicializaWebcam(0)
df_train <- xlsx::read.xlsx2("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
train <- TransformarDF(df_train)
stream1 <- InicializaWebcam(0)
imagen <- CapturaImagen()
df_train <- xlsx::read.xlsx("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
imagen <- CapturaImagen()
df_train <- AddRasgos(df_train, "Samuel")
setwd("/Users/Gus/Desktop/JantoNext/R/RPrograms/GoogleVision/")
########### CARGAMOS LAS LIBRERIAS #############
library(xlsx)
library(tidyverse)
library(RoogleVision)
library(jsonlite)
library(EBImage)
library(leaflet)
library(videoplayR)
library(rpart)
library(dplyr)
############## CARGAMOS CREDENCIALES DE GOOGLE ##############
creds = fromJSON('client_secret_936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com.json')
options("googleAuthR.client_id" = "936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "WS4mT_giiompZ5VgAKD7mNCh")
options("googleAuthR.client_id" = creds$installed$client_id)
options("googleAuthR.client_secret" = creds$installed$client_secret)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
################# FUNCIONES ################
InicializaWebcam <- function (id){
return(readStream(id))
}
CapturaImagen <- function (){
imagen <- nextFrame(stream1)
imshow(imagen)
writeImg("imagen.jpg", imagen)
return('./imagen.jpg')
}
DetectarRasgos <- function(NombrePersona, id){
my_face = getGoogleVisionResponse(imagen, feature = 'FACE_DETECTION')
df <- data.frame(matrix(unlist(my_face$landmarks), nrow=34, byrow=F))
names(df) <- c("type","x","y","z")
df$person <- NombrePersona
df$id <- id
return(df)
}
AddRasgos <- function(df_train, Nombre){
df_train <- df_train %>%
as_tibble() %>%
rbind(DetectarRasgos(Nombre, max(df_train$id)+1))
return(df_train)
}
TransformarDF <- function(df){
df$X. <- NULL
x <- spread(df[,c(1,2,5)], key = "type", value = "x")
y <- spread(df[,c(1,3,5)], key = "type", value = "y")
z <- spread(df[,c(1,4,5)], key = "type", value = "z")
names(x) <- paste(names(x),"-x",sep="")
names(y) <- paste(names(y),"-y",sep="")
names(z) <- paste(names(z),"-z",sep="")
x <- x %>%
as_tibble() %>%
mutate(person = `person-x`) %>%
select(-`person-x`)
y <- y %>%
as_tibble() %>%
mutate(person = `person-y`) %>%
select(-`person-y`)
z <- z %>%
as_tibble() %>%
mutate(person = `person-z`) %>%
select(-`person-z`)
train <- x %>%
left_join(y) %>%
left_join(z)
aux <- train
train[] <- lapply(train[], function(x) as.numeric(levels(x)))
train$person <- aux$person
return(train)
}
####### CAPTURAR DATOS PARA ENTRENAR EL ALGORITMO ##########
#stream1 <- InicializaWebcam(0)
#imagen <- CapturaImagen()
#df_train <- DetectarRasgos("", 1)
df_train <- xlsx::read.xlsx2("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
################ PREDICCION ##############
train <- TransformarDF(df_train)
############## DATOS A CALCULAR #################
stream1 <- InicializaWebcam(0)
imagen <- CapturaImagen()
df_train <- xlsx::read.xlsx("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
#imagen <- CapturaImagen()
#df_train <- AddRasgos(df_train, "Samuel")
#xlsx::write.xlsx(df_train, "df_train.xlsx")
################ PREDICCION ##############
df_detect <- DetectarRasgos("", 1)
df_detect$id <- NULL
detect <- TransformarDF(df_detect)
aux <- train
train$person <- NULL
detect$person<- NULL
resultado <- train
i <- 1
while(i<nrow(resultado)){
x <- 1
while(x<ncol(resultado)){
resultado[i,x] <- log(resultado[i,x])/log(detect[1,x])
x <- x + 1
}
i <- i + 1
}
i <- 1
while(i<nrow(resultado)){
resultado$calculo[i] <- sum(resultado[i,])/ncol(resultado)
i <- i + 1
}
resultado$person <- aux$person
resultado[,103:104] %>%
as_tibble() %>%
arrange(desc(calculo))
# A tibble: 3 x 2
#calculo person
#<dbl> <fctr>
#   1 0.5693671    Gus
#   2 0.5622243  David
#   3 0.5622243 Samuel
setwd("/Users/Gus/Desktop/JantoNext/R/RPrograms/GoogleVision/")
########### CARGAMOS LAS LIBRERIAS #############
library(xlsx)
library(tidyverse)
library(RoogleVision)
library(jsonlite)
library(EBImage)
library(leaflet)
library(videoplayR)
library(rpart)
library(dplyr)
############## CARGAMOS CREDENCIALES DE GOOGLE ##############
creds = fromJSON('client_secret_936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com.json')
options("googleAuthR.client_id" = "936144180729-halug7oitvt411am56e6m48i3jk0n3tk.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "WS4mT_giiompZ5VgAKD7mNCh")
options("googleAuthR.client_id" = creds$installed$client_id)
options("googleAuthR.client_secret" = creds$installed$client_secret)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
################# FUNCIONES ################
InicializaWebcam <- function (id){
return(readStream(id))
}
CapturaImagen <- function (){
imagen <- nextFrame(stream1)
imshow(imagen)
writeImg("imagen.jpg", imagen)
return('./imagen.jpg')
}
DetectarRasgos <- function(NombrePersona, id){
my_face = getGoogleVisionResponse(imagen, feature = 'FACE_DETECTION')
df <- data.frame(matrix(unlist(my_face$landmarks), nrow=34, byrow=F))
names(df) <- c("type","x","y","z")
df$person <- NombrePersona
df$id <- id
return(df)
}
AddRasgos <- function(df_train, Nombre){
df_train <- df_train %>%
as_tibble() %>%
rbind(DetectarRasgos(Nombre, max(df_train$id)+1))
return(df_train)
}
TransformarDF <- function(df){
df$X. <- NULL
x <- spread(df[,c(1,2,5)], key = "type", value = "x")
y <- spread(df[,c(1,3,5)], key = "type", value = "y")
z <- spread(df[,c(1,4,5)], key = "type", value = "z")
names(x) <- paste(names(x),"-x",sep="")
names(y) <- paste(names(y),"-y",sep="")
names(z) <- paste(names(z),"-z",sep="")
x <- x %>%
as_tibble() %>%
mutate(person = `person-x`) %>%
select(-`person-x`)
y <- y %>%
as_tibble() %>%
mutate(person = `person-y`) %>%
select(-`person-y`)
z <- z %>%
as_tibble() %>%
mutate(person = `person-z`) %>%
select(-`person-z`)
train <- x %>%
left_join(y) %>%
left_join(z)
aux <- train
train[] <- lapply(train[], function(x) as.numeric(levels(x)))
train$person <- aux$person
return(train)
}
####### CAPTURAR DATOS PARA ENTRENAR EL ALGORITMO ##########
#stream1 <- InicializaWebcam(0)
#imagen <- CapturaImagen()
#df_train <- DetectarRasgos("", 1)
df_train <- xlsx::read.xlsx2("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
################ PREDICCION ##############
train <- TransformarDF(df_train)
############## DATOS A CALCULAR #################
stream1 <- InicializaWebcam(0)
imagen <- CapturaImagen()
#df_train <- DetectarRasgos("", 1)
df_train <- xlsx::read.xlsx("df_train.xlsx", sheetIndex = 1)
df_train$NA. <- NULL
#imagen <- CapturaImagen()
#df_train <- AddRasgos(df_train, "Samuel")
#xlsx::write.xlsx(df_train, "df_train.xlsx")
################ PREDICCION ##############
df_detect <- DetectarRasgos("", 1)
df_detect$id <- NULL
detect <- TransformarDF(df_detect)
aux <- train
train$person <- NULL
detect$person<- NULL
resultado <- train
i <- 1
while(i<nrow(resultado)){
x <- 1
while(x<ncol(resultado)){
resultado[i,x] <- log(resultado[i,x])/log(detect[1,x])
x <- x + 1
}
i <- i + 1
}
i <- 1
while(i<nrow(resultado)){
resultado$calculo[i] <- sum(resultado[i,])/ncol(resultado)
i <- i + 1
}
resultado$person <- aux$person
resultado[,103:104] %>%
as_tibble() %>%
arrange(desc(calculo))
# A tibble: 3 x 2
#calculo person
#<dbl> <fctr>
#   1 0.5693671    Gus
#   2 0.5622243  David
#   3 0.5622243 Samuel
